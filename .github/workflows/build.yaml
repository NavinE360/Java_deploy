name: CICD Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=javaapp -Dsonar.projectName='javaapp'

  deploy:
    runs-on: self-hosted  # Run on your self-hosted runner
    needs: build  # This job still depends on the 'build' job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: python-code-artifact
      - name: Verify Downloaded Artifact
        run: |
          # List the contents of the current directory to verify the artifact is downloaded
          echo "Listing files after artifact download"
          ls -al
          echo "Listing contents of the downloaded artifact"
          ls -al  # This will show the contents of the artifact files
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-1'
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/nav18.pem
          chmod 600 ~/.ssh/nav18.pem  # Set appropriate permissions for the private key
      - name: Ensure target directory exists on EC2
        run: |
          ssh -i ~/.ssh/nav18.pem ubuntu@ip-18-181-84-207 << 'EOF'
            # Ensure /home/ubuntu/app directory exists
            sudo mkdir -p /home/ubuntu/app
            sudo chown ubuntu:ubuntu /home/ubuntu/app  # Give ownership to the ubuntu user
            # Ensure it has the correct permissions
            sudo chmod 755 /home/ubuntu/app
          EOF
      - name: Deploy code to EC2
        run: |
          # Copy the artifact to EC2 instance using scp with the private key
          scp -i ~/.ssh/nav18.pem -r * ubuntu@ip-18-181-84-207:/home/ubuntu/app
          # SSH into the EC2 instance to install dependencies and start the app
          ssh -i ~/.ssh/nav18.pem ubuntu@ip-18-181-84-207 << 'EOF'
            cd /home/ubuntu/app
            # Add any necessary deployment steps here, such as starting the app
          EOF
